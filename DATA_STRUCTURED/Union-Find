/**
 * 분리집합 학습 후, 유니온-파인드 학습 및 자바 구현 진행
 * 참고: https://velog.io/@injoon2019/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EB%B0%B1%EC%A4%80-%EC%A7%91%ED%95%A9%EC%9D%98-%ED%91%9C%ED%98%84
 */
public class Main {
    static int n, m;
    static int[] parent;

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        StringTokenizer st = new StringTokenizer(br.readLine());
        n = Integer.parseInt(st.nextToken());
        m = Integer.parseInt(st.nextToken());

        // 처음에는 자기 자신을 가리킨다
        for (int i = 0; i < n + 1; i++) {
            parent[i] = i;
        }

        for (int i = 0; i < m; i++) {
            st = new StringTokenizer(br.readLine());
            int tmp = Integer.parseInt(st.nextToken());
            int a = Integer.parseInt(st.nextToken());
            int b = Integer.parseInt(st.nextToken());

            if(tmp == 0){
                // 합집합 연산
                union(a,b);
            }else if(tmp == 1){
                //확인 연산
                if(find(a) == find(b)){
                    bw.write("YES");
                }else{
                    bw.write("NO");
                }
            }
        }

        br.close();
        bw.close();
    }

    private static void union(int a, int b){
        // 부모를 찾는 find 과정
        a = find(a);
        b = find(b);

        // 같은 집합 소속이라는 의미
        if(a==b){
            return;
        }
        parent[b] = a;
    }

    private static int find(int a){
        if(parent[a] == a){
            return a;
        }
        parent[a] = find(parent[a]);
        return parent[a];
    }

}
