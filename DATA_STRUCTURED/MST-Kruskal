// 최소 스패닝 트리의 두번째 구현 방법, 크루스칼 알고리즘을 구현하였다.
// 유니온-파인드 구현이 필요했기 때문에 프림알고리즘 이후 분리집합과 유니온-파인드를 먼저 학습한 뒤 크루스칼 알고리즘 학습을 진행하였다
// 첫번째난 들어가는 정점 두번째는 나가는 정점 세번째는 그 비용을 담을 2차원 배열 graph를 선언한다
// find과정을 통해 0번과 1번 인덱스의 부모 노드가 같지 않으면 2번째 인덱스의 비용을 cost함수에 더하고 union해준다
// 이 과정 전에 graph 배열은 cost 값이 들어가있는 2번째 인덱스를 기준으로 오름차순 정렬을 해야한다.
// 참고: https://velog.io/@suk13574/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98Java-%ED%81%AC%EB%A3%A8%EC%8A%A4%EC%B9%BCKruskal-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98

public class Main {

    public static void union(int[] parent, int x, int y){
        int rx = find(parent, x);
        int ry = find(parent, y);

        if(rx < ry){
            parent[ry] = rx;
        }else{
            parent[rx] = ry;
        }
    }

    public static int find(int[] parent, int a){
        if(parent[a] == a){
            return a;
        }
        parent[a] = find(parent, parent[a]);
        return parent[a];
    }

    public static void kruskal(int[][] graph, int[] parent){
        int cost = 0;
        for (int i = 0; i < graph.length; i++) {
            if(find(parent, graph[i][0]) != find(parent, graph[i][1])){
                cost += graph[i][2];
                union(parent, graph[i][0], graph[i][1]);
            }
        }
        System.out.println(cost);
    }


    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

        int n = Integer.parseInt(br.readLine());
        int m = Integer.parseInt(br.readLine());
        int[][] graph = new int[m][3];

        StringTokenizer st;
        for (int i = 0; i < m; i++) {
            st = new StringTokenizer(br.readLine());
            graph[i][0] = Integer.parseInt(st.nextToken());
            graph[i][1] = Integer.parseInt(st.nextToken());
            graph[i][2] = Integer.parseInt(st.nextToken());
        }

        Arrays.sort(graph, (o1,o2) -> o1[2] - o2[2]);

        int[] parent = new int[n+1];
        for (int i = 0; i < parent.length; i++) {
            parent[i] = i;
        }

        kruskal(graph, parent);

        br.close();
        bw.close();
    }
}
