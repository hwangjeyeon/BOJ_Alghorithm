import java.io.*;
import java.util.*;

// 다익스트라 알고리즘 공부 목적 구현
// 참고출처: https://velog.io/@suk13574/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98Java%EB%8B%A4%EC%9D%B5%EC%8A%A4%ED%8A%B8%EB%9D%BCDijkstra-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98

class Node implements Comparable<Node>{
    //연결 정점 번호
    int index;
    //가중치
    int cost;

    public Node(int index, int cost) {
        this.index = index;
        this.cost = cost;
    }

    /**
     *
     * PriorityQueue<Node> pq = new PriorityQueue<Node>
     * ((o1, o2) -> Integer.compare(o1.cost, o2.cost));
     *
     */
    @Override
    public int compareTo(Node o) {
        return Integer.compare(this.cost, o.cost);
    }
}





public class Main {
    static ArrayList<Node>[] graph;

    //노드의 크기, 출발지
    public static void Dijkstra(int n, int start){
        boolean[] check = new boolean[n+1];
        int[] dist = new int[n+1];
        int INF = Integer.MAX_VALUE;

        Arrays.fill(dist, INF);
        dist[start] = 0;

        PriorityQueue<Node> pq = new PriorityQueue<>();
        pq.offer(new Node(start, 0));

        while(!pq.isEmpty()){
            int nowVertex = pq.poll().index;

            if(check[nowVertex]){
                continue;
            }
            check[nowVertex] = true;

            //index의 연결된 정점 비교
            for (Node next : graph[nowVertex]) {
                if(dist[next.index] > dist[nowVertex] + next.cost){
                    dist[next.index] = dist[nowVertex] + next.cost;

                    pq.offer(new Node(next.index, dist[next.index]));
                }
            }
        }

        //최소거리 출력
        for (int i : dist) {
            if(i == INF){
                System.out.println(0 + " ");
            }else{
                System.out.println(i + " ");
            }
        }
    }

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        //그래프 입력
        // 정점의 개수, 간선의 개수
        int n = Integer.parseInt(br.readLine());
        int m = Integer.parseInt(br.readLine());

        graph = new ArrayList[n+1];
        for (int i = 0; i <= n; i++) {
            graph[i] = new ArrayList<>();
        }

        StringTokenizer st;
        for (int i = 0; i < m; i++) {
            st = new StringTokenizer(br.readLine());
            int v = Integer.parseInt(st.nextToken());
            int w = Integer.parseInt(st.nextToken());
            int cost = Integer.parseInt(st.nextToken());

            graph[v].add(new Node(w, cost));
        }

        int start = Integer.parseInt(br.readLine());

        Dijkstra(n, start);

        br.close();
        bw.close();
    }

}
