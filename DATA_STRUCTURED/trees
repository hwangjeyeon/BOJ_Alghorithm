/**
 * - 노드 및 이진 트리 구현
 * - 이진트리 추가, 삭제, 검색(순회) 기능 구현
 * 
 * - 참고: https://you88.tistory.com/31
 */

class Node{
    private int value;
    private Node left;
    private Node right;

    public int getValue() {
        return value;
    }

    public void setValue(int value) {
        this.value = value;
    }

    public Node getLeft() {
        return left;
    }

    public void setLeft(Node left) {
        this.left = left;
    }

    public Node getRight() {
        return right;
    }

    public void setRight(Node right) {
        this.right = right;
    }
}


class BinarySearchTree{
    private Node root;

    public BinarySearchTree() {
        this.root = null;
    }

    public void add(int value){
        Node newNode = new Node();
        newNode.setValue(value);

        if(root == null){
            root = newNode;
        }else{
            root = addNode(root, newNode);
        }
    }

    private Node addNode(Node node, Node newNode){
        if(node == null){

        }else if(node.getValue() > newNode.getValue()){
            node.setLeft(addNode(node.getLeft(), newNode));
        }else{
            node.setRight(addNode(node.getRight(), newNode));
        }


        return node;
    }

    public void remove(int value){
        root = removeNode(root, value);
    }

    private Node removeNode(Node node, int value) {
        if(node == null){
            throw new RuntimeException("해당 값을 가진 노드를 찾을 수 없습니다.");
        }

        //삭제할 노드를 찾는 경우
        if(node.getValue() > value){
            node.setLeft(removeNode(node.getLeft(), value));
        }else if(node.getValue() < value){
            node.setRight(removeNode(node.getRight(), value));
        }else{
            // 삭제할 노드를 찾을 경우
            if(node.getLeft() != null){
                // 왼쪽 서브트리에서 가장 오른쪽에 있는 값 찾아 변경
                Node child = findMaxNode(node.getLeft());
                int removeValue = node.getValue();
                node.setValue(child.getValue());
                child.setValue(removeValue);
                node.setLeft(removeNode(node.getLeft(),value));
            }else if(node.getRight() != null){
                // 오른쪽 서브트리에서 가장 왼쪽에 있는 값 찾아 변경
                Node child = findMinNode(node.getRight());
                int removeValue = node.getValue();
                node.setValue(child.getValue());
                child.setValue(removeValue);
                node.setLeft(removeNode(node.getRight(),value));
            }else{
                return null;
            }

        }
        return node;
    }

    private Node findMinNode(Node node) {
        if(node.getLeft() == null){
            return node;
        }else{
            return findMinNode(node.getLeft());
        }
    }

    private Node findMaxNode(Node node) {
        if(node.getRight() == null){
            return node;
        }else{
            return findMaxNode(node.getRight());
        }

    }

    public void search(int value){
        searchNode(root, value);
    }

    private Node searchNode(Node node, int value) {
        if(node == null){
            throw new RuntimeException("해당 값을 가진 노드를 찾을 수 없습니다.");
        }

        if(node.getValue() > value){
            node.setRight(searchNode(node.getRight(), value));
        }else if(node.getValue() < value){
            node.setLeft(searchNode(node.getLeft(), value));
        }else{
            System.out.println("해당 값을 가진 노드를 찾았습니다.");
        }
        return node;
    }

    //전위 순회
    private void preOrder(Node node){
        if(node == null){
            return;
        }
        System.out.println(node.getValue());
        preOrder(node.getLeft());
        preOrder(node.getRight());
    }
    //좌측 중위 순회 == 오름차순 순회
    private void leftInOrder(Node node){
        if(node == null){
            return;
        }
        leftInOrder(node.getLeft());
        System.out.println(node.getValue());
        leftInOrder(node.getRight());
    }

    //좌측 중위 순회 == 오름차순 순회
    private void rightInOrder(Node node){
        if(node == null){
            return;
        }
        rightInOrder(node.getRight());
        System.out.println(node.getValue());
        rightInOrder(node.getLeft());
    }

    //후위 순회
    private void postOrder(Node node){
        if(node == null){
            return;
        }
        postOrder(node.getLeft());
        postOrder(node.getRight());
        System.out.println(node.getValue());
    }

}

