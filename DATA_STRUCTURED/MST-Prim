// 최소 스패닝 트리 - 프림 알고리즘 학습 및 구현
// 참고: https://velog.io/@suk13574/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98Java-%ED%94%84%EB%A6%BCPrim-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98


class Edge implements Comparable<Edge>{
    int w; // 들어오는 정점 간선
    int cost; // 가중치

    public Edge(int w, int cost) {
        this.w = w;
        this.cost = cost;
    }

    // 간선 오름차순 정렬

    @Override
    public int compareTo(Edge o) {
        return this.cost - o.cost;
    }
}

public class Main {
    static List<Edge>[] graph;
    public static void prim(int start, int n){
        boolean[] visit = new boolean[n + 1];

        PriorityQueue<Edge> pq = new PriorityQueue<>();
        pq.offer(new Edge(start, 0));

        // 완성된 최소 스패닝 트리의 총 가중치 합
        int total = 0;
        while(!pq.isEmpty()){
            Edge edge = pq.poll();
            int v = edge.w;
            int cost = edge.cost;

            //방문 했으면 스킵
            if (visit[v]) {
                continue;
            }
            visit[v] = true;
            total += cost;

            for (Edge e : graph[v]) {
                if(!visit[e.w]){
                    pq.add(e);
                }
            }
        }

        System.out.println(total);

    }

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

        int n = Integer.parseInt(br.readLine());
        int m = Integer.parseInt(br.readLine());

        graph = new ArrayList[n + 1];
        for (int i = 0; i < graph.length; i++) {
            graph[i] = new ArrayList<>();
        }
        StringTokenizer st;
        for (int i = 0; i < m; i++) {
            st = new StringTokenizer(br.readLine());
            int v = Integer.parseInt(st.nextToken());
            int w = Integer.parseInt(st.nextToken());
            int cost = Integer.parseInt(st.nextToken());

            graph[v].add(new Edge(w, cost));
            graph[v].add(new Edge(v, cost));
        }
        prim(1,n);


        br.close();
        bw.close();
    }

}
