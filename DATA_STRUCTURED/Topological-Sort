import java.io.*;
import java.util.*;


public class Main {

    // 임시 그래프
    static List<Integer>[] node = new ArrayList[9];

    // 그래프 노드 별, 진입차수
    static int[] edge = new int[9];
    static void topologicalSort(){
        Queue<Integer> q = new LinkedList<>();

        for (int i = 1; i < edge.length; i++) {
            if(edge[i] == 0){
                q.offer(i);
            }
        }

        while(!q.isEmpty()){
            int now = q.poll();
            sb.append(now +" ");
            List<Integer> list = node[now];
            for (int i = 0; i < list.size(); i++) {
                edge[list.get(i)]--;
                if(edge[list.get(i)] == 0){
                    q.offer(list.get(i));
                }
            }
        }

    }

    static StringBuilder sb = new StringBuilder();
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        for (int i = 0; i < 9; i++) {
            node[i] = new ArrayList<>();
        }

        // 그래프 각 노드별 인접한 노드정보 초기화
        node[1].add(2);
        node[1].add(4);
        node[2].add(5);
        node[2].add(6);
        node[3].add(6);
        node[4].add(2);
        node[4].add(8);
        node[7].add(3);
        node[8].add(6);

        // 진입차수 테이블 초기화
        edge[2] = 2;
        edge[3] = 1;
        edge[4] = 1;
        edge[5] = 1;
        edge[6] = 3;
        edge[8] = 1;
        topologicalSort();

        bw.write(sb.toString()+"");

        br.close();
        bw.close();
    }

}

