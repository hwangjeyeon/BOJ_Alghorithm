import java.io.*;
import java.util.*;


/**
 * 풀이 과정:
 *
 * 시간복잡도: O()
 * 공간복잡도: O()
 *
 */



public class Main {

    static StringBuilder sb = new StringBuilder();
    static int count = 0;
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        int n = Integer.parseInt(br.readLine());
        int m = Integer.parseInt(br.readLine());
        StringTokenizer st;
        int[][] arr = new int[n+1][n+1];
        boolean[] visited = new boolean[n+1];
        for (int i = 0; i < m; i++) {
            st = new StringTokenizer(br.readLine());
            int a = Integer.parseInt(st.nextToken());
            int b = Integer.parseInt(st.nextToken());

            arr[a][b] = 1;
            arr[b][a] = 1;
        }
        dfs(arr, visited, n, m);
        bw.write(String.valueOf(count-1));

        br.close();
        bw.close();
    }

    static void dfs (int[][] arr, boolean[] visited, int n, int m){
        Stack<Integer> stack = new Stack<>();
        stack.push(1);
        while(!stack.isEmpty()){
            int now = stack.pop();
            if(visited[now]){
                continue;
            }
            count++;
            visited[now] = true;
            for (int i = n; i >= 0; i--) {
                if(arr[now][i] == 1 && !visited[i]){
                    stack.push(i);

                }
            }
        }

    }

}

